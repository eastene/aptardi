def annot_from_download(refGene_path, chrom_sizes_dict):
    
    file = refGene_path+'refGene.txt.gz'
    output_write = open(refGene_path+'modified_annot.bed', 'w')
    
    with gzip.open(file, 'rt') as f:
        for line in f:
            fields = line.strip('\n').split('\t')
            if '_' not in fields[2]:
                strand = fields[3]
                tx_start = fields[4]
                tx_end = fields[5]                   
            
                if strand == '+':
                    UTR_start = fields[9].strip(',').split(',')[-1]
                    UTR_length = abs(int(UTR_start) - int(tx_end))
                    if UTR_length < 10000:
                        extended_UTR = str(int(tx_end) + (10000 - UTR_length))
                        if fields[2] in chrom_sizes_dict:
                            total_chrom_length = chrom_sizes_dict[fields[2]][0]
                            if int(total_chrom_length) < int(extended_UTR):
                                extended_UTR = total_chrom_length
                        extended_exons = fields[10].strip(',').split(',')
                        extended_exons[-1] = extended_UTR
                        fields[10] = (',').join(extended_exons)
                        tx_end = extended_UTR
                            
                elif strand == '-':
                    UTR_start = fields[10].strip(',').split(',')[0]
                    UTR_length = abs(int(UTR_start) - int(tx_start))
                    if UTR_length < 10000:
                        extended_UTR = str(int(tx_start) - (10000 - UTR_length))
                        if int(extended_UTR) < 0:
                            extended_UTR = '0'
                        extended_exons = fields[9].strip(',').split(',')
                        extended_exons[0] = extended_UTR
                        fields[9] = (',').join(extended_exons)
                        tx_start = extended_UTR
                            
                rel_exon_starts = (',').join([str(int(i)-int(tx_start)) for i in fields[9].strip(',').split(',')])
                exon_sizes = (',').join([str(int(a)-int(b)) for a, b in zip(fields[10].strip(',').split(','), fields[9].strip(',').split(','))])
                num_exons = str(len(fields[10].strip(',').split(',')))
                new_id = [fields[1], fields[12], fields[2], fields[4], fields[5], strand]
                new_bed_id = '|'.join(new_id)
                write_line = [fields[2], tx_start, tx_end, new_bed_id, '0', strand, fields[6], fields[7], '255, 0, 0', num_exons, exon_sizes, rel_exon_starts]
                output_write.writelines('\t'.join(write_line) + '\n')


    output_write.close()
    print('Transcript annotations completed %s' % (time_now()))
    
